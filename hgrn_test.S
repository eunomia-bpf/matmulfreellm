# HGRN Test Vectors for Assembly Accelerator
# Generated test data in assembly format

.section .rodata
.align 4

input_x:
    # Input vector X
    .byte 8, -2, 10, 24, -4, -4, 25, 12, -8, 9, -7, -7, 4, -31, -28, -9

input_h:
    # Previous hidden state
    .byte -3, 1, -3, -5, 5, -1, 0, -5, -2, 0, -4, 1, -2, -1, -2, 6

input_b:
    # Bias vector
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

weight_g:
    # Gate weight matrix (ternary)
    .byte 1, -1, 1, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, -1, 0, -1, -1, 0, 1, -1, 0, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 0, 1, 0, -1, 1, -1, 0, -1, 1, 1, 0, -1, 1, 0, 1, 1, -1, 1, -1, 1, 0, 1, -1, -1, 0, 1, 1, 0, 1, 1, -1, 1, 1, 0, 0, -1, 1, 1, 1, -1, -1, 0, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 0, 0, 0, -1, 0, -1, -1, 0, 0, 0, 1, 0, 1, -1, 1, 0, -1, -1, -1, 1, 0, -1, -1, -1, 1, 1, 0, 1, -1, 0, -1, -1, 1, 0, 1, 1, 0, -1, -1, 0, -1, 0, 0, 1, 0, 1, -1, -1, -1, -1, 1, -1, 0, 0, 0, 1, -1, -1, -1, 1, 0, 0, -1, 0, 0, 1, 1, 1, 1, -1, 1, 0, -1, 0, 0, 0, 1, 1, -1, -1, 1, 0, -1, 1, 1, 1, 0, 1, 1, 1, 1, -1, -1, 1, 0, -1, 1, -1, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, -1, 0, -1, 0, -1, -1, 1, 1, -1, -1, 1, 1, 1, 0, -1, 1, -1, 0, 0, 1, 0, -1, 1, -1, -1, 0, 0, 0, 0, 0, 1, -1, -1, -1, -1, 0, -1, 1, 1, -1, -1, 1

weight_f:
    # Forget weight matrix (ternary)
    .byte 1, 0, 1, 0, 0, 0, 0, 0, -1, 1, 0, 1, 1, 0, -1, 0, -1, 1, -1, -1, -1, 1, 1, -1, -1, 0, -1, 0, -1, 0, 1, -1, -1, -1, -1, 0, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, -1, -1, -1, 1, 0, 1, -1, 0, 1, 0, 1, 0, -1, -1, 0, 1, -1, -1, -1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, -1, 0, 1, 0, -1, 0, 0, 0, 0, -1, 0, 0, 1, 0, 1, -1, -1, -1, -1, 1, 0, -1, 0, 1, 1, 1, -1, 0, 0, 0, 1, -1, 1, 1, 0, 1, 0, -1, 0, -1, 0, 1, 1, -1, -1, -1, 0, 0, -1, 1, 0, 0, 0, -1, -1, -1, -1, -1, 1, 1, -1, 0, -1, 1, 1, 0, 1, -1, 0, -1, -1, 0, -1, 1, -1, 0, 0, 0, -1, 0, 0, -1, 1, -1, 0, 0, -1, 1, 0, 0, 0, -1, 0, 1, 0, 0, 1, 0, -1, -1, -1, 1, 0, -1, 1, 0, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 0, 1, -1, -1, 1, 0, 0, -1, 1, 0, 1, 1, -1, 0, -1, 0, 0, 0, 0, 0, 1, -1, 1, 0, -1, 0, -1, 1, -1, -1, -1, -1, -1, 0, -1, -1, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1

weight_c:
    # Candidate weight matrix (ternary)
    .byte

weight_o:
    # Output weight matrix (ternary)
    .byte 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, -1, 0, -1, 1, 0, 1, 0, 1, -1, -1, -1, 0, -1, 0, -1, -1, 0, 0, -1, 0, -1, 0, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 0, -1, 1, 1, 1, -1, 0, -1, 0, 1, 1, -1, -1, 0, 0, -1, 0, -1, 0, -1, -1, -1, 0, 0, 0, -1, 0, 0, -1, 1, -1, 0, -1, 1, -1, 0, 1, 0, 1, 1, -1, -1, 0, -1, -1, 1, -1, 1, 1, 1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, -1, 0, 0, 0, 1, 1, 1, -1, 1, -1, 0, 1, -1, -1, 1, 0, 0, 0, -1, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 0, 0, 1, -1, 1, 0, -1, -1, 0, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 0, -1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, -1, 1, 1, 1, 1, -1, 1, 0, 0, 1, 1, 0, 0, -1, 0, 0, 1, 0, -1, 0, 1, 1, 0, 1, -1, -1, 0, 0, 0, 1, -1, -1, 1, -1, 0, 0, 0, -1, 0, 1, 1, -1, 1, 1, -1, 0, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, -1, -1, -1, -1, 1, 1, 0, 1, 1, 0, 1, -1, -1, 0, 0, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1

expected_output:
    # Expected output vector
    .byte -33, 20, 37, 42, -8, 20, -33, -4, 43, 35, -35, -36, 10, -19, -68, 10


.section .text
.global test_hgrn

test_hgrn:
    # Load test vectors
    la a0, input_x        # X vector
    la a1, input_h        # oH vector
    la a2, input_b        # B vector
    la a3, weight_g       # WG matrix
    la a4, weight_f       # WF matrix
    la a5, weight_c       # WC matrix
    la a6, weight_o       # WO matrix
    la a7, output_buffer  # O vector (result)
    
    # Call HGRN accelerator
    jal generate_token
    
    # Compare with expected output
    la t0, expected_output
    la t1, output_buffer
    li t2, 16             # vector size
    
compare_loop:
    lb t3, 0(t0)
    lb t4, 0(t1)
    bne t3, t4, test_fail
    addi t0, t0, 1
    addi t1, t1, 1
    addi t2, t2, -1
    bnez t2, compare_loop
    
test_pass:
    li a0, 0              # return 0 for success
    ret
    
test_fail:
    li a0, 1              # return 1 for failure
    ret

.section .bss
.align 4
output_buffer:
    .space 16             # Space for output vector
